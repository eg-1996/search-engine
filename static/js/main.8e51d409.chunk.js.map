{"version":3,"sources":["InputField.js","Api.js","UserItem.js","UserCard.js","ResultBox.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","textField","color","InputField","id","defaultValue","onChange","error","label","onKeyDown","classes","TextField","required","InputProps","className","InputLabelProps","SelectProps","search","searchParameter","page","perPage","setResults","fetch","then","res","json","result","console","log","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","UserItem","user","handleClick","ListItem","button","alignItems","onClick","ListItemAvatar","Avatar","src","avatar_url","ListItemText","primary","login","defaultProps","url","minWidth","title","fontSize","pos","marginBottom","avatar","height","UserCard","Card","CardContent","Typography","variant","component","name","location","bio","followers","following","CardActions","Button","href","html_url","ResultBox","results","useState","selectedUser","setSelectedUser","userURL","setUserInfo","userList","items","forEach","push","Grid","container","item","xs","List","total_count","App","searchField","setSearchField","setPage","isFieldEmpty","setIsFieldEmpty","handleSearchEvent","event","length","type","key","value","target","trim","startIcon","Pagination","count","Math","floor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e51d409.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n        textField:{\r\n            color: 'black'\r\n        }\r\n  });\r\n\r\nconst InputField = ({ id, defaultValue, onChange, error, label, onKeyDown }) => {\r\n    const classes = useStyles();\r\n    return(\r\n        <TextField\r\n        required \r\n        id={id} \r\n        defaultValue={defaultValue}\r\n        onChange={onChange}\r\n        error={error}\r\n        label={label}\r\n        onKeyDown={onKeyDown}\r\n        InputProps={{\r\n            className: classes.textField\r\n          }}\r\n        InputLabelProps={{\r\n            className: classes.textField\r\n        }}\r\n        SelectProps={{\r\n            className: classes.textField\r\n        }}\r\n\r\n        />\r\n    );\r\n}\r\n\r\nexport default InputField;","const search = (searchParameter, page,perPage, setResults) =>{\r\n    fetch(`https://api.github.com/search/users?q=${searchParameter}&per_page=${perPage}&page=${page}`)\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            console.log(result);\r\n            setResults(result);\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n    );\r\n};\r\nconst getUserProfile = (userURL, setUserInfo) =>{\r\n    fetch(userURL)\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            console.log(result);\r\n            setUserInfo(result);\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n    );\r\n};\r\nconst getFollowingCount = (followingURL, setFollowingInfo) =>{\r\n    fetch(followingURL)\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            console.log(result);\r\n            setFollowingInfo(result);\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n    );\r\n};\r\nconst getFollowersCount = (followersURL, setFollowersInfo) =>{\r\n    fetch(followersURL)\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            console.log(result);\r\n            setFollowersInfo(result);\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n    );\r\n};\r\nconst getStarredCount = (starredURL, setStarredInfo) =>{\r\n    fetch(starredURL)\r\n    .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            console.log(result);\r\n            setStarredInfo(result);\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        }\r\n    );\r\n};\r\n\r\nexport {\r\n    search,\r\n    getUserProfile,\r\n    getFollowingCount,\r\n    getFollowersCount,\r\n    getStarredCount\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListItem, ListItemText, ListItemAvatar, Avatar, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nconst  UserItem = ({user, handleClick}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <ListItem button alignItems='flex-start' onClick={()=> handleClick(user)}>\r\n            <ListItemAvatar>\r\n            <Avatar src={user?.avatar_url} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user?.login}\r\n            />\r\n        </ListItem>\r\n    );\r\n}\r\n\r\nUserItem.defaultProps ={\r\n    user:{\r\n        avatar_url: '',\r\n        login: '',\r\n        url: ''\r\n    }\r\n}\r\n\r\nexport default UserItem\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, Avatar, CardActions, CardContent, Button, Typography } from '@material-ui/core/';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 275,\r\n    },\r\n    title: {\r\n      fontSize: 24,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n    avatar:{\r\n        height: '100px',\r\n        width: '100px'\r\n    }\r\n  });\r\n\r\nconst UserCard = ({ user }) => {\r\n    const classes = useStyles();\r\n    if (!user) {\r\n        return null;\r\n      }\r\n  \r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Avatar src={user?.avatar_url} className={classes.avatar}/>\r\n                <Typography variant='h5' component='h1'>\r\n                    {user?.name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color='textSecondary'>\r\n                    {user?.login}\r\n                </Typography>\r\n                <Typography className={classes.pos} color='textSecondary'>\r\n                    {user?.location}\r\n                </Typography>\r\n                <Typography component='h4'>\r\n                    {user?.bio}\r\n                </Typography>\r\n\r\n                <Typography variant='body1' component='p'>\r\n                    Followers: {user?.followers}\r\n                </Typography>\r\n               \r\n                <Typography variant='body2' component='p'>\r\n                    following: {user?.following}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button variant='contained' href={user?.html_url}>View Profile</Button>\r\n            </CardActions>\r\n      </Card>\r\n    );\r\n}\r\n\r\n\r\nexport default UserCard;","import React,{ useState } from 'react';\r\nimport { List, Grid } from '@material-ui/core';\r\nimport UserItem from './UserItem';\r\nimport UserCard from './UserCard';\r\nimport { getUserProfile } from './Api';\r\n\r\nconst ResultBox = ({ results }) => {\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    console.log(results);\r\n    const handleClick = (user) => { \r\n        getUserProfile(user.url, setSelectedUser);\r\n    }\r\n\r\n    const userList =[];\r\n    results.items.forEach(user => {\r\n        userList.push(<UserItem user={user} handleClick={handleClick} key={user.id}/>)\r\n    });\r\n\r\n    return (<Grid container>\r\n        <Grid item xs={6}>\r\n            <List>\r\n                {userList}\r\n            </List>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            <UserCard user={selectedUser}/>\r\n        </Grid>\r\n        \r\n    </Grid>)\r\n};\r\n\r\nResultBox.defaultProps = {\r\n    results:{\r\n        items: [],\r\n        total_count: 0\r\n     }\r\n}\r\nexport default ResultBox;","import React, { useState } from 'react';\n\nimport './App.css';\nimport ImputField from './InputField';\nimport { Button, Grid, Typography } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { search } from './Api';\nimport ResultBox from './ResultBox';\nimport Pagination from '@material-ui/lab/Pagination';\n\n\nconst App = () => {\n  const [searchField, setSearchField] = useState('');\n  const [page, setPage] = useState(1);\n  const [results, setResults] =useState({items: [], total_count: 0});\n  const[isFieldEmpty, setIsFieldEmpty] = useState(true);\n  const perPage = 10;\n  const handleTextEvent = (event) => {\n    if (event.target.value.trim().length>0) {\n      setIsFieldEmpty(false);\n    }\n    setSearchField(event.target.value.trim());\n  };\n  const handlePageEvent = (event, value) =>{\n    search(searchField, value, perPage, setResults)\n    setPage(value);\n  };\n\n  const handleSearchEvent =(event) =>{\n    console.log(searchField.length);\n    if (searchField.length<=0) {\n      setIsFieldEmpty(true);\n    } else {\n      setIsFieldEmpty(false);\n    }\n    if(\n      !isFieldEmpty && \n      (event.type === 'click' || event.key === 'Enter')\n      ){\n      search(searchField, page, perPage, setResults);\n    }\n  }\n  return (\n    <div className='App-header'>\n      <Grid container>\n      <Grid item xs ={8}>\n        <ImputField \n          error={isFieldEmpty}\n          label='Search'\n          id='test'\n          value={searchField}\n          onChange={handleTextEvent}\n          onKeyDown={handleSearchEvent}\n        />\n        </Grid>\n        <Grid item xs={2}>\n        <Button \n          variant='contained'\n          startIcon={<SearchIcon />}\n          onClick={handleSearchEvent}\n        >\n          Search\n        </Button>\n        </Grid>\n        <Grid item xs={2}>\n        <Typography variant='body1' >\n          TotalCount: {results.total_count}\n        </Typography>\n        </Grid>\n      </Grid>\n      <ResultBox \n        results={results}\n      />\n        {results.total_count>0\n        ? <Pagination count={Math.floor(results.total_count/perPage)} page={page} onChange={handlePageEvent} />\n        : null\n        }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}